print(Z)
x1 = c(2,8,6,8)
x2 = c(12,9,9,10)
n = length(x1)
X= cbind(x1, x2)
X_mu_0 = c(7,11)
X_barra = c(mean(x1), mean(x2))
Z = cov(X)
Z_inv = solve(Z)
T_square = n * (X_barra- X_mu_0)%*%(Z_inv)%*%(X_barra- X_mu_0)
print(T_square)
p = 0.95
F_2_2 = qf(p, 2,2)
distribution = 3 * F_2_2
x1 = c(2,8,6,8)
x2 = c(12,9,9,10)
n = length(x1)
X= cbind(x1, x2)
X_mu_0 = c(7,11)
X_mu_og = c(6,10)
matriz_mu_og = rbind(X_mu_og,X_mu_og,X_mu_og,X_mu_og)
#sigma_gorro = ((n-1)/n)*cov(X)
sigma_gorro_0 = matrix(data = c(0,0,0,0), nrow = 2, ncol = 2)
matriz_mu_0 = rbind(X_mu_0,X_mu_0,X_mu_0,X_mu_0)
sigma_gorro_0 = t(X - matriz_mu_0) %*% ((X - matriz_mu_0))
sigma_gorro = t(X - matriz_mu_og) %*% ((X - matriz_mu_og))
lambda = (det(sigma_gorro)/det(sigma_gorro_0))^2
lambda
Tcuad = (lambda^(-2/n) -1 )*(n-1)
print(Tcuad)
alpha = 0.05 #esto porque nos piden 95% de confianza
p = 6
n = 61
X_barra = c(95.52, 164.38, 55.69, 93.39, 17.98, 31.13)
c1 = c(3266.46, 1343.97, 731.54, 1175.5,162.68,238.37)
c2 = c(1343.97,721.91,324.25,537.35,80.17,117.73)
c3 = c(731.54,324.25,179.28,281.17,39.15,56.80)
c4 = c(1175.50,537.35,281.17,474.98,63.73,94.85)
c5 = c(162.68,80.17,39.15,63.73,9.95,13.88)
c6 = c(238.37,117.73,56.80,94.85,13.88,21.26)
S = cbind(c1,c2,c3,c4,c5,c6)
S
#Vector de cancelación para variable 1
a = c(1,0,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = (p*(n-1))/(n*(n-p))
a_t_X_b = (a%*%X_barra)[1,1]
F_p_n = qf(1-alpha, p, n-p)
lw_lm = a_t_X_b - sqrt(fract*F_p_n*asa)
up_lm = a_t_X_b + sqrt(fract*F_p_n*asa)
weight_IC = c(lw_lm, up_lm)
#Vector de cancelación para variable 2
a = c(0,1,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = (p*(n-1))/(n*(n-p))
a_t_X_b = (a%*%X_barra)[1,1]
F_p_n = qf(1-alpha, p, n-p)
lw_lm = a_t_X_b - sqrt(fract*F_p_n*asa)
up_lm = a_t_X_b + sqrt(fract*F_p_n*asa)
B_len_IC = c(lw_lm, up_lm)
#Vector de cancelación para variable 3
a = c(0,0,1,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = (p*(n-1))/(n*(n-p))
a_t_X_b = (a%*%X_barra)[1,1]
F_p_n = qf(1-alpha, p, n-p)
lw_lm = a_t_X_b - sqrt(fract*F_p_n*asa)
up_lm = a_t_X_b + sqrt(fract*F_p_n*asa)
neck_IC = c(lw_lm, up_lm)
#Vector de cancelación para variable 4
a = c(0,0,0,1,0,0)
asa = (a%*%S%*%a)[1,1]
fract = (p*(n-1))/(n*(n-p))
a_t_X_b = (a%*%X_barra)[1,1]
F_p_n = qf(1-alpha, p, n-p)
lw_lm = a_t_X_b - sqrt(fract*F_p_n*asa)
up_lm = a_t_X_b + sqrt(fract*F_p_n*asa)
girth_IC = c(lw_lm, up_lm)
#Vector de cancelación para variable 5
a = c(0,0,0,0,1,0)
asa = (a%*%S%*%a)[1,1]
fract = (p*(n-1))/(n*(n-p))
a_t_X_b = (a%*%X_barra)[1,1]
F_p_n = qf(1-alpha, p, n-p)
lw_lm = a_t_X_b - sqrt(fract*F_p_n*asa)
up_lm = a_t_X_b + sqrt(fract*F_p_n*asa)
H_len_IC = c(lw_lm, up_lm)
#Vector de cancelación para variable 6
a = c(0,0,0,0,0,1)
asa = (a%*%S%*%a)[1,1]
fract = (p*(n-1))/(n*(n-p))
a_t_X_b = (a%*%X_barra)[1,1]
F_p_n = qf(1-alpha, p, n-p)
lw_lm = a_t_X_b - sqrt(fract*F_p_n*asa)
up_lm = a_t_X_b + sqrt(fract*F_p_n*asa)
H_width_IC = c(lw_lm, up_lm)
-
angle <- atan(eigen(S_mini)$vectors[2,1]/eigen(S_mini)$vectors[1,1])
plot(0,pch='',ylab='',xlab='',xlim=c(50,150),ylim=c(70,120))
axis1 <- sqrt(eigen(S_mini)$values[1])*
sqrt(
(p*(n-1))/
(n*(n-p))* # no es el mismo valor critico que antes
qf(1-alpha,p,n-p))
axis2 <- sqrt(eigen(S_mini)$values[2])*
sqrt((p*(n-1))/(n*(n-p))*qf(1-alpha,p,n-p))
lengths <- c(axis1,axis2)
draw.ellipse(x=X_barra_mini[1],y=X_barra_mini[2],a=lengths[1],b=lengths[2],angle=angle,deg=FALSE)
install.packages('plotrix')
alpha = 0.05
p = 6
a = c(1,0,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/2*p),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
weight_IC_c = c(lw_lm, up_lm)
knitr::opts_chunk$set(echo = TRUE)
t.bonf
knitr::opts_chunk$set(echo = TRUE)
X <- matrix(c(3,4,5,4,
6,4,7,7),byrow=FALSE,ncol=2)
n <- nrow(X)
p <- ncol(X)
(X.mean <- t(matrix(1,ncol=n) %*% X)/n)
D <- X - matrix(1,nrow=n) %*% t(X.mean)
(S <- (n)^(-1) * t(D)%*%D)
x1=c(2,8,6,8)
x2=c(12,9,9,10)
matriz=cbind(x1,x2)
k=ncol(matriz) #Numero de variables
n=nrow(matriz) #Numero de observaciones
matriz_mean=cbind(mean(x1), mean(x2))
matriz_s=cov(matriz)
matriz_sinv=solve(matriz_s)
mu0=c(7,11)
t2=n*(matriz_mean-mu0)%*%matriz_sinv%*%t(matriz_mean-mu0)
#Valor crítico
alpha = 0.05 # Nivel de significancia
critical.value = (k*(n-1))/(n-k)*qf(1-alpha,k,n-k)
#Matriz sigma_0
s11_0=((matriz[1]-mu0[1])^2+(matriz[2]-mu0[1])^2+(matriz[3]-mu0[1])^2+(matriz[4]-mu0[1])^2)/(n-1)
s22_0=((matriz[5]-mu0[2])^2+(matriz[6]-mu0[2])^2+(matriz[7]-mu0[2])^2+(matriz[8]-mu0[2])^2)/(n-1)
s12_0=((matriz[1]-mu0[1])*(matriz[5]-mu0[2])+(matriz[2]-mu0[1])*(matriz[6]-mu0[2])+(matriz[3]-mu0[1])*(matriz[7]-mu0[2])+(matriz[4]-mu0[1])*(matriz[8]-mu0[2]))/(n-1)
x1_0=c(s11_0, s12_0)
x2_0=c(s12_0, s22_0)
matriz_s0=cbind(x1_0,x2_0)
lambda=(det(matriz_s)/det(matriz_s0))^(n/2)
X_bar = matrix(c(95.52,164.38, 55.69, 93.39, 17.98, 31.13), ncol = 1)
S = matrix(c(3266.46, 1343.97, 731.54, 1175.50, 162.68, 238.37,
1343.97, 721.91, 324.25, 537.35, 80.17, 117.73,
731.54, 324.25, 179.28, 281.17, 39.15, 56.80,
1175.50, 537.35, 281.17, 474.98, 63.73, 94.85,
162.68, 80.17, 39.15, 63.73, 9.95, 13.88,
238.37, 117.73, 56.80, 94.85, 13.88, 21.26),byrow=TRUE,ncol=6)
# a)
a_vectors = diag(6)
p = nrow(X_bar)
n = 61
alpha = 0.05
constant = (p*(n-1))/(n*(n-p))
estadistico = qf(alpha,p,n-p,lower.tail = F)
lim_inferior = c()
lim_superior = c()
for (i in 1:6){
a = a_vectors[,i]
termino_1 = t(a) %*% X_bar
raiz_2 = sqrt(constant * estadistico * t(a) %*% S %*% a)
lim_inferior = append(lim_inferior,termino_1 - raiz_2)
lim_superior = append(lim_superior,termino_1 + raiz_2)
}
simultaneous_CI = matrix(c(lim_inferior,lim_superior),ncol = 2)
simultaneous_CI
# b)
X_barb = matrix(c(X_bar[1,1], X_bar[4,1]), ncol = 1)
Sb = matrix(c(S[1,1], S[1,4], S[4,1],S[4,4]),byrow=TRUE,ncol=2)
library(plotrix)
angle <- atan(eigen(Sb)$vectors[2,1]/eigen(Sb)$vectors[1,1])
plot(0,pch='',ylab='',xlab='',xlim=c(65,125),ylim=c(80,110))
axis1 <- sqrt(eigen(Sb)$values[1])*
sqrt(
(p*(n-1))/
(n*(n-p))* # no es el mismo valor critico que antes
qf(1-alpha,p,n-p))
axis2 <- sqrt(eigen(Sb)$values[2])*
sqrt((p*(n-1))/(n*(n-p))*qf(1-alpha,p,n-p))
lengths <- c(axis1,axis2)
draw.ellipse(x=X_barb[1,1],y=X_barb[2,1],a=lengths[1],b=lengths[2],angle=angle,deg=FALSE)
# c)
b <- 6
t.bonf <- qt(1-alpha/(2*b),df=n-1)
lim_inferior = c()
lim_superior = c()
for (i in 1:6){
termino_1 = X_bar[i,]
termino_2 = t.bonf * sqrt(S[i,i]/n)
lim_inferior = append(lim_inferior,termino_1 - termino_2)
lim_superior = append(lim_superior,termino_1 + termino_2)
}
bonferroni_CI = matrix(c(lim_inferior,lim_superior),ncol = 2)
bonferroni_CI
# d)
plot(0,pch='',ylab='',xlab='',xlim=c(65,125),ylim=c(80,110))
draw.ellipse(x=X_barb[1,1],y=X_barb[2,1],a=lengths[1],b=lengths[2],angle=angle,deg=FALSE)
l1 = simultaneous_CI[1,1]
u1 = simultaneous_CI[1,2]
l2 = simultaneous_CI[4,1]
u2 = simultaneous_CI[4,2]
abline(v=l1,lty=3);abline(v=u1,lty=3)
abline(h=l2,lty=3);abline(h=u2,lty=3)
l1b = bonferroni_CI[1,1]
u1b = bonferroni_CI[1,2]
l2b = bonferroni_CI[4,1]
u2b = bonferroni_CI[4,2]
abline(v=l1b,lty=2);abline(v=u1b,lty=2)
abline(h=l2b,lty=2);abline(h=u2b,lty=2)
t.bonf
tstudent
tstudent = qt((1-alpha/(2*p)),df = n-1 )
tstudent
alpha = 0.05
p = 6
a = c(1,0,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
weight_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 1
alpha = 0.05
p = 6
a = c(1,0,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
weight_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 2
alpha = 0.05
p = 6
a = c(0,1,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
B_len_IC_c = c(lw_lm, up_lm)
alpha = 0.05
p = 6
a = c(0,1,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
B_len_IC_c = c(lw_lm, up_lm)
B_len_IC_c
a = c(0,0,1,0,0,0)
#Vector de cancelación para variable 1
alpha = 0.05
p = 6
a = c(1,0,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
weight_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 2
alpha = 0.05
p = 6
a = c(0,1,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
B_len_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 3
alpha = 0.05
p = 6
a = c(0,0,1,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
neck_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 1
alpha = 0.05
p = 6
a = c(1,0,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
weight_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 2
alpha = 0.05
p = 6
a = c(0,1,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
B_len_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 3
alpha = 0.05
p = 6
a = c(0,0,1,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
neck_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 4
alpha = 0.05
p = 6
a = c(0,0,0,1,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
girth_IC_c = c(lw_lm, up_lm)
alpha = 0.05
p = 6
a = c(0,0,0,1,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
girth_IC_c = c(lw_lm, up_lm)
girth_IC_c
#Vector de cancelación para variable 1
alpha = 0.05
p = 6
a = c(1,0,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
weight_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 2
alpha = 0.05
p = 6
a = c(0,1,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
B_len_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 3
alpha = 0.05
p = 6
a = c(0,0,1,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
neck_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 4
alpha = 0.05
p = 6
a = c(0,0,0,1,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
girth_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 5
alpha = 0.05
p = 6
a = c(0,0,0,0,1,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
H_len_IC_c = c(lw_lm, up_lm)
H_len_IC_c
#Vector de cancelación para variable 1
alpha = 0.05
p = 6
a = c(1,0,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
weight_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 2
alpha = 0.05
p = 6
a = c(0,1,0,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
B_len_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 3
alpha = 0.05
p = 6
a = c(0,0,1,0,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
neck_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 4
alpha = 0.05
p = 6
a = c(0,0,0,1,0,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
girth_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 5
alpha = 0.05
p = 6
a = c(0,0,0,0,1,0)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
H_len_IC_c = c(lw_lm, up_lm)
#Vector de cancelación para variable 6
alpha = 0.05
p = 6
a = c(0,0,0,0,0,1)
asa = (a%*%S%*%a)[1,1]
fract = sqrt(asa/n)
a_t_X_b = (a%*%X_barra)[1,1]
tstudent = qt((1-alpha/(2*p)),df = n-1 )
lw_lm = a_t_X_b - tstudent*fract
up_lm = a_t_X_b + tstudent*fract
H_width_IC_c = c(lw_lm, up_lm)
install.packages('devtools')
library(plotrix)
X_barra_mini = c(X_barra[1], X_barra[4])
S_mini = matrix(c(S[1,1], S[1,4], S[4,1], S[4,4]), ncol = 2, nrow = 2)
S_mini_data = eigen(S_mini)
lambda1 = S_mini_data$values[1]
lambda2 = S_mini_data$values[2]
e1 = S_mini_data$vectors[,1]
e2 = S_mini_data$vectors[,2]
eje_1 = X_barra_mini + sqrt(lambda1)*sqrt(fract*F_p_n)*e1
eje_2 = X_barra_mini - sqrt(lambda1)*sqrt(fract*F_p_n)*e1
eje_3 = X_barra_mini + sqrt(lambda2)*sqrt(fract*F_p_n)*e2
eje_4 = X_barra_mini - sqrt(lambda2)*sqrt(fract*F_p_n)*e2
#install.packages('plotrix')
angle <- atan(eigen(S_mini)$vectors[2,1]/eigen(S_mini)$vectors[1,1])
plot(0,pch='',ylab='',xlab='',xlim=c(50,150),ylim=c(70,120))
axis1 <- sqrt(eigen(S_mini)$values[1])*
sqrt(
(p*(n-1))/
(n*(n-p))* # no es el mismo valor critico que antes
qf(1-alpha,p,n-p))
axis2 <- sqrt(eigen(S_mini)$values[2])*
sqrt((p*(n-1))/(n*(n-p))*qf(1-alpha,p,n-p))
lengths <- c(axis1,axis2)
draw.ellipse(x=X_barra_mini[1],y=X_barra_mini[2],a=lengths[1],b=lengths[2],angle=angle,deg=FALSE)
angle <- atan(eigen(S_mini)$vectors[2,1]/eigen(S_mini)$vectors[1,1])
plot(0,pch='',ylab='',xlab='',xlim=c(50,150),ylim=c(70,120))
axis1 <- sqrt(eigen(S_mini)$values[1])*
sqrt(
(p*(n-1))/
(n*(n-p))* # no es el mismo valor critico que antes
qf(1-alpha,p,n-p))
axis2 <- sqrt(eigen(S_mini)$values[2])*
sqrt((p*(n-1))/(n*(n-p))*qf(1-alpha,p,n-p))
lengths <- c(axis1,axis2)
draw.ellipse(x=X_barra_mini[1],y=X_barra_mini[2],a=lengths[1],b=lengths[2],angle=angle,deg=FALSE)
